 #!/usr/bin/env python3

import argparse ## https://docs.python.org/3/library/argparse.html#module-argparse
import os
import sys
import XICRA

## initiate parser
parser = argparse.ArgumentParser(
    prog='XICRA',
    description='sRNA pipeline for...'
  	##,epilog="(c) 2019. Jose F. Sanchez and Lauro Sumoy."
)
subparsers = parser.add_subparsers(title='Available modules', help='', metavar='')

## help options list
help_options = ('--help_format',
				'--help_project',
				'--help_trimm_adapters',
				'--help_multiqc')

## space
#subparser_space = subparsers.add_parser(' ', help='')

#########################
#### Prepare samples ####
#########################

##--------------------------- prepareSamples ----------------- ##
subparser_prep = subparsers.add_parser(
    'sample',
    help='Prepares FASTQ files from samples',
    description='This module prepares fastq files from a sequencing run. It could renamed, copy, link or merge them when multiples files have been generated for the same sample e.g different lanes. It concatenates these files according the common identifier and generates a unique file, one per paired-read if necessary',
)

in_out_group_prep = subparser_prep.add_argument_group("Input/Output")
in_out_group_prep.add_argument("--input", help="Folder containing fastq files. Files could be .fastq/.fq/ or fastq.gz/.fq.gz. All files would be retrieved.", required= not any(elem in help_options for elem in sys.argv))
in_out_group_prep.add_argument("--output_folder", help="Output folder. Name for the project folder.", required= not any(elem in help_options for elem in sys.argv))
in_out_group_prep.add_argument("--single_end", action="store_true", help="Single end files [Default OFF]. Default mode is paired-end.")
in_out_group_prep.add_argument("--batch", action="store_true", help="Provide this option if input is a file containing multiple paths instead a path.")
in_out_group_prep.add_argument("--in_sample", help="File containing a list of samples to include (one per line) from input folder(s) [Default OFF].")
in_out_group_prep.add_argument("--ex_sample", help="File containing a list of samples to exclude (one per line) from input folder(s) [Default OFF].")

options_group_prep = subparser_prep.add_argument_group("Options")
options_group_prep.add_argument("--threads", type=int, help="Number of CPUs to use [Default: 2].", default=2)
options_group_prep.add_argument("--copy", action="store_true", help="Instead of generating symbolic links, copy files into output folder. [Default OFF].")
options_group_prep.add_argument("--merge", action="store_true", help="Merges FASTQ files for the same sample [Default OFF].")
options_group_prep.add_argument("--rename", help="File containing original name and final name for each sample separated by comma. No need to provide a name for each pair if paired-end files. If provided with option '--merge', the merge files would be renamed accordingly.")

info_group_prep = subparser_prep.add_argument_group("Additional information")
info_group_prep.add_argument("--help_format", action="store_true", help="Show additional help on name format for files.")
info_group_prep.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")

subparser_prep.set_defaults(func=XICRA.modules.sampleParser.retrieve)
##-------------------------------------------------------------##


##--------------------------- citation ------------------------##
subparser_citation = subparsers.add_parser(
    'citation',
    help='Packages & software citations.',
    description='This code prints an index of citation for the different packages and other softwares employed here',
)
subparser_citation.add_argument("option", help="Print only this pipeline citation or all packages references.", choices=['only','all'])
subparser_citation.set_defaults(func=XICRA.modules.citation.run)

#####
args = parser.parse_args()
if hasattr(args, 'func'):
    args.func(args)
else:
    parser.print_help()

